<?xml version="1.0"?>
<project
		name="NHibernate.Shards"
		default="build"
		description="NHibernate Shards for horizontal partitioning of databases"
		xmlns="http://nant.sf.net/release/0.91-alpha2/nant.xsd">

	<property name="project.config" value="debug" overwrite="false" />
	<property name="project.version" value="3.3.1.CR1" overwrite="false" />
	<property name="project.debug" value="${project.config == 'debug'}" />

	<property name="build.dir" value="build" overwrite="false"/>
	<property name="lib.dir" value="lib" overwrite="false"/>
	<property name="package.dir" value="src/packages" />
	<property name="src.dir" value="src" />
	<property name="tool.dir" value="tools" />

	<target name="init">
		<property name="project.defines" value="${if(project.debug, 'DEBUG', '')}" />

		<property name="nuget.sources" value="http://nuget.org/api/v2/" overwrite="false"/>

		<!-- Compute and set project.version.numeric from project.version -->
		<script language="C#">
			<code>
				<![CDATA[
					public const int BaseAlpha = 1000;
					public const int BaseBeta  = 2000;
					public const int BaseCR    = 3000;
					public const int BaseGA    = 4000;
					// SP is same as GA because GA has no number and SP's start with 1.
					public const int BaseSP    = 4000;

					public static void ScriptMain(Project project)
					{
						string version = project.Properties["project.version"];
						
						int qualifierStart = version.LastIndexOf('.') + 1;
						int qualifierNumberStart = version.IndexOfAny(
							"0123456789".ToCharArray(),
							qualifierStart);
						if (qualifierNumberStart < 0) qualifierNumberStart = version.Length;

						string qualifier = version.Substring(qualifierStart, qualifierNumberStart - qualifierStart);
						int revisionBase = GetRevisionBase(qualifier);
						int qualifierNumber = qualifierNumberStart < version.Length
							? int.Parse(version.Substring(qualifierNumberStart))
							: 0;

						string versionBase = version.Substring(0, qualifierStart-1);
						string revisionNumber = (revisionBase + qualifierNumber).ToString();

						project.Properties["project.version.numeric"] = versionBase + "." + revisionNumber;
						project.Properties["project.version.semantic"] = versionBase + "-" + version.Substring(qualifierStart);
					}

					public static int GetRevisionBase(string qualifier)
					{
						switch (qualifier)
						{
							case "Alpha": return BaseAlpha;
							case "Beta":  return BaseBeta;
							case "CR":    return BaseCR;
							case "GA":    return BaseGA;
							case "SP":    return BaseSP; 
							default:			throw new BuildException("Unknown version qualifier " + qualifier);
						}
					}
				]]>
			</code>
		</script>
	</target>

	<target name="clean" depends="init">
		<delete dir="${build.dir}" failonerror="false"/>
	</target>

	<target name="resolve" description="Installs and updates NuGet dependencies" depends="init">
		<foreach item="File" property="_packageConfigFile">
			<in>
				<items basedir="${src.dir}">
					<include name="**/packages.config"/>
				</items>
			</in>
			<do>
				<!-- Force package refresh for release builds -->
				<if test="${not project.debug}">
					<delete includeemptydirs="true">
						<fileset basedir="${package.dir}">
							<include name="**/*.*" />
							<exclude name="*.config" />
						</fileset>
					</delete>
					
					<exec program="nuget.exe" basedir="${tool.dir}" unless="${project.debug}">
						<arg value="update" />
						<arg file="${_packageConfigFile}" />
						<arg value="-Source" />
						<arg value="${nuget.sources}" />
						<arg value="-RepositoryPath" />
						<arg path="${package.dir}" />
						<arg value="-Verbose" />
					</exec>
				</if>

				<exec program="nuget.exe" basedir="${tool.dir}">
					<arg value="install" />
					<arg file="${_packageConfigFile}" />
					<arg value="-Source" />
					<arg value="${nuget.sources}" />
					<arg value="-OutputDirectory" />
					<arg path="${package.dir}" />
				</exec>
			</do>
		</foreach>
	</target>

	<target name="build" depends="init resolve">
		<property name="compile.targetframework" value="${framework::get-target-framework()}" />
		<property name="compile.targetframework.nuget" value="${string::replace(string::replace(compile.targetframework, '.', ''), '-', '')}" />
		<property name="compile.build.dir" value="${build.dir}/${compile.targetframework.nuget}" />

		<property name="compile.project.name" value="NHibernate.Shards" />
		<assemblyfileset id="compile.references">
			<include name="${package.dir}/NHibernate.*/lib/${compile.targetframework.nuget}/NHibernate.dll"/>
			<include name="${package.dir}/Iesi.Collections.*/lib/${compile.targetframework.nuget}/Iesi.Collections.dll"/>
		</assemblyfileset>
		<call target="build.project" />

		<property name="compile.project.name" value="NHibernate.Shards.Test" />
		<assemblyfileset id="compile.references">
			<include name="${compile.build.dir}/NHibernate.Shards.dll"/>
			<include name="${package.dir}/NHibernate.*/lib/${compile.targetframework.nuget}/NHibernate.dll"/>
			<include name="${package.dir}/Iesi.Collections.*/lib/${compile.targetframework.nuget}/Iesi.Collections.dll"/>
			<include name="${package.dir}/NUnit.*/lib/nunit.framework.dll"/>
			<include name="${package.dir}/RhinoMocks.*/lib/net/Rhino.Mocks.dll"/>
		</assemblyfileset>
		<call target="build.project" />
	</target>

	<target name="build.project">
		<asminfo language="CSharp" output="${src.dir}/${compile.project.name}/AssemblyInfo.cs">
			<imports>
				<import namespace="System" />
				<import namespace="System.Reflection" />
			</imports>
			<attributes>
				<attribute type="CLSCompliantAttribute" value="true" />
				<attribute type="AssemblyTitleAttribute" value="${compile.project.name}" />
				<attribute type="AssemblyCompanyAttribute" value="nhforge.org" />
				<attribute type="AssemblyProductAttribute" value="${project::get-name()}" />
				<attribute type="AssemblyCopyrightAttribute" value="Licensed under LGPL." />
				<attribute type="AssemblyVersionAttribute" value="${project.version.numeric}" />
				<attribute type="AssemblyFileVersionAttribute" value="${project.version.numeric}" />
				<attribute type="AssemblyInformationalVersionAttribute" value="${project.version.numeric}" />
			</attributes>
		</asminfo>

		<csc target="library" 
				 output="${compile.build.dir}/${compile.project.name}.dll" 
				 doc="${compile.build.dir}/${compile.project.name}.xml"
				 define="${project.defines}" 
				 debug="${if(project.debug, 'Full', 'PdbOnly')}" >
			<nowarn>
				<warning number="1591" />
				<!-- No XML comment for publicly visible member -->
			</nowarn>
			<sources basedir="${src.dir}/${compile.project.name}">
				<include name="**/*.cs"/>
			</sources>
			<references refid="compile.references" />
		</csc>

		<property name="_appConfigFile" value="${src.dir}/${compile.project.name}/App.config" />		
		<copy file="${_appConfigFile}" tofile="${compile.build.dir}/${compile.project.name}.dll.config" 
					if="${file::exists(_appConfigFile)}" />

		<copy todir="${compile.build.dir}" flatten="true">
			<fileset refid="compile.references" />
		</copy>

		<exec program="nunit-console" basedir="${tool.dir}/nunit">
			<arg value="/framework:${nant.settings.currentframework}" />
			<arg file="${compile.build.dir}/NHibernate.Shards.Test.dll" />
		</exec>
	</target>
	
	<target name="pack" depends="init build">
		<foreach item="File" property="_nuspecFile">
			<in>
				<items basedir="${src.dir}">
					<include name="**/*.nuspec" />
				</items>
			</in>
			<do>
				<exec program="nuget.exe" basedir="${tool.dir}" verbose="true">
					<arg value="pack" />
					<arg file="${_nuspecFile}" />
					<arg value="-Version" />
					<arg value="${project.version.numeric}" />
					<arg value="-BasePath" />
					<arg path="${project::get-base-directory()}" />
					<arg value="-OutputDirectory" />
					<arg path="${build.dir}" />
					<arg value="-Symbols" />
					<arg value="-Properties" />
					<arg value="Configuration=${project.config};version=${project.version.numeric}" />
					<arg value="-Verbose" />
				</exec>
			</do>
		</foreach>
	</target>

	<target name="publish" depends="init pack">
		<foreach item="File" property="_packageFile">
			<in>
				<items basedir="${build.dir}">
					<include name="*.nupkg" />
					<exclude name="*.symbols.nupkg"/>
				</items>
			</in>
			<do>
				<exec program="nuget.exe" basedir="${tool.dir}" verbose="true">
					<arg value="push" />
					<arg file="${_packageFile}" />
				</exec>
			</do>
		</foreach>
	</target>
</project>